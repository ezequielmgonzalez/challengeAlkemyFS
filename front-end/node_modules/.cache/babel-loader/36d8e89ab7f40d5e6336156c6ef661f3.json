{"ast":null,"code":"var _jsxFileName = \"/home/ezequiel/challengeFullStack/my-app/src/components/ListMovements.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport EditMovement from \"./EditMovement\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ListMovements = () => {\n  _s();\n\n  const [list, setList] = React.useState([]); // const [popUp, setPopUp] = React.useState(false)\n  // const togglePopUp = () => {\n  //     setPopUp(!popUp)\n  // }\n\n  const getMovements = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/movements\");\n      const jsonData = await response.json();\n      setList(jsonData.slice(0, 10));\n      console.log(jsonData);\n    } catch (e) {\n      console.error(e.message);\n    }\n  };\n\n  const deleteMovement = async id => {\n    try {\n      const deleteMovement = await fetch(`http://localhost:5000/movements/${id}`, {\n        method: \"DELETE\"\n      });\n      setList(list.filter(list => list.movement_id !== id));\n    } catch (e) {\n      console.error(e.message);\n    }\n  }; // Makes a fetch request tou our REST api everytime this is component is rendered\n\n\n  React.useEffect(() => {\n    getMovements();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Concept\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: list.map(list => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: list.amount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: list.concept\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: list.dateM\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: list.typeM\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(EditMovement, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => deleteMovement(list.movement_id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 29\n          }, this)]\n        }, list.movement_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ListMovements, \"ZBNfaudzy8bVxb8UgkyyMnLdlWY=\");\n\n_c = ListMovements;\nexport default ListMovements;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListMovements\");","map":{"version":3,"sources":["/home/ezequiel/challengeFullStack/my-app/src/components/ListMovements.js"],"names":["React","Table","EditMovement","ListMovements","list","setList","useState","getMovements","response","fetch","jsonData","json","slice","console","log","e","error","message","deleteMovement","id","method","filter","movement_id","useEffect","map","amount","concept","dateM","typeM"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { Table } from \"react-bootstrap\"\nimport EditMovement from \"./EditMovement\"\n\nconst ListMovements = () => {\n    const [list, setList] = React.useState([])\n    // const [popUp, setPopUp] = React.useState(false)\n\n    // const togglePopUp = () => {\n    //     setPopUp(!popUp)\n    // }\n\n    const getMovements = async () => {\n        try {\n            const response = await fetch(\"http://localhost:5000/movements\")\n            const jsonData = await response.json()\n            setList(jsonData.slice(0,10))\n            console.log(jsonData)\n        } catch (e) {\n            console.error(e.message)\n        }\n    }\n\n    const deleteMovement = async (id) => {\n        try {\n            const deleteMovement = await fetch(`http://localhost:5000/movements/${id}`, {\n                method: \"DELETE\"\n            })\n            setList(list.filter(list => list.movement_id !== id))\n        } catch (e) {\n            console.error(e.message)\n        }\n    }\n\n    // Makes a fetch request tou our REST api everytime this is component is rendered\n    React.useEffect(() => {\n        getMovements()\n    }, [])\n\n    return (\n        <React.Fragment>\n            {\" \"}\n            {/* <table>\n                <thead>\n                <tr>\n                    <th>Amount</th>\n                    <th>Concept</th>\n                    <th>Date</th>\n                    <th>Type</th>\n                    <th>Edit</th>\n                    <th>Delete</th>\n                </tr>\n                </thead>\n                <tbody>\n                \n                {list.map(list => (\n                    <tr key={list.movement_id}>\n                        <td>{list.amount}</td>\n                        <td>{list.concept}</td>\n                        <td>{list.dateM}</td>\n                        <td>{list.typeM}</td>\n                        <td>\n                            <div>\n                                <input\n                                type=\"button\"\n                                value=\"Click to Open Popup\"\n                                onClick={togglePopUp}\n                                />\n                                {popUp && <EditMovement\n                                    movement={list}\n                                    handleClose={togglePopUp}\n                                />}\n                            </div>\n                        </td>\n                        <td>\n                            <button\n                            onClick={() => deleteMovement(list.movement_id)}\n                            >\n                            Delete\n                            </button>\n                        </td>\n                    </tr>\n                ))}\n                </tbody>\n            </table> */}\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                    <th>Amount</th>\n                    <th>Concept</th>\n                    <th>Date</th>\n                    <th>Type</th>\n                    <th></th>\n                    <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {list.map(list => (\n                        <tr key={list.movement_id}>\n                            <td>{list.amount}</td>\n                            <td>{list.concept}</td>\n                            <td>{list.dateM}</td>\n                            <td>{list.typeM}</td>\n                            <td>\n                                <EditMovement />\n                                {/* <EditMovement /> */}\n                                {/* <div>\n                                    <input\n                                    type=\"button\"\n                                    value=\"Click to Open Popup\"\n                                    onClick={togglePopUp}\n                                    />\n                                    {popUp && <EditMovement\n                                        movement={list}\n                                        handleClose={togglePopUp}\n                                    />}\n                                </div> */}\n                            </td>\n                            <td>\n                                <button\n                                onClick={() => deleteMovement(list.movement_id)}\n                                >\n                                Delete\n                                </button>\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </Table>\n        </React.Fragment>\n    )\n}\n\nexport default ListMovements"]},"metadata":{},"sourceType":"module"}