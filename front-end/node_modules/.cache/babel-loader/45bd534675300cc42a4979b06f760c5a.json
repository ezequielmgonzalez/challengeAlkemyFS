{"ast":null,"code":"var _jsxFileName = \"/home/ezequiel/challengeFullStack/my-app/src/components/EditMovement.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Modal, Button, Form, InputGroup, FormControl } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction EditMovement(_ref) {\n  _s();\n\n  let {\n    list\n  } = _ref;\n  const [show, setShow] = React.useState(false);\n  console.log(list);\n  const [amount, setAmount] = React.useState(list.amount);\n  const [concept, setConcept] = React.useState(list.concept);\n  const [typeM, setTypeM] = React.useState(list.typem);\n  const [dateM, setDateM] = React.useState(list.datem.substring(0, 10));\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const onSubmitForm = async e => {\n    // Handle the form submitted\n    // Prevent from refresh\n    e.preventDefault();\n\n    try {\n      const body = {\n        amount,\n        concept,\n        typeM,\n        dateM\n      };\n      const response = await fetch(`http://localhost:5000/movements/${list.movement_id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      }); //  Once the response has been sent, itś going to refresh and show the changes\n\n      window.location = \"/\";\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      onClick: handleShow,\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Edit movement\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: onSubmitForm,\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(InputGroup.Text, {\n              children: \"$\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              value: amount,\n              onChange: e => setAmount(e.target.value),\n              \"aria-label\": \"Amount (to the nearest dollar)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Concept\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n            className: \"mb-3\",\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              value: concept,\n              \"aria-describedby\": \"basic-addon1\",\n              onChange: e => setConcept(e.target.value),\n              \"aria-describedby\": \"basic-addon1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Type of Operation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            value: typeM,\n            onChange: e => setTypeM(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n              inline: true,\n              disabled: true,\n              label: \"Income\",\n              name: \"group1\",\n              type: \"radio\",\n              id: `inline-radio-1`,\n              value: \"I\",\n              checked: typeM === \"I\" ? true : false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n              inline: true,\n              disabled: true,\n              label: \"Outcome\",\n              name: \"group1\",\n              type: \"radio\",\n              id: `inline-radio-2`,\n              value: \"O\",\n              checked: typeM === \"O\" ? true : false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this)]\n          }, `inline-radio`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            className: \"mb-3\",\n            type: \"date\",\n            value: dateM,\n            onChange: e => setDateM(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          className: \"mb-3\",\n          variant: \"primary\",\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // import \"../style.css\"\n// const EditMovement = props => {\n//     const [amount, setAmount] = React.useState(props.movement.amount)\n//     const [concept, setConcept] = React.useState(props.movement.concept)\n//     const [typeM, setTypeM] = React.useState(props.movement.typeM)\n//     const [dateM, setDateM] = React.useState(props.movement.dateM)\n//     const onSubmitForm = async e => {\n//         // Handle the form submitted\n//         // Prevent from refresh\n//         e.preventDefault()\n//         try {\n//           const body = { amount, concept, typeM, dateM }\n//           const response = await fetch(`http://localhost:5000/movements/${props.movement.movement_id}`, {\n//               method: \"PUT\",\n//               headers: { \"Content-Type\": \"application/json\" },\n//               body: JSON.stringify(body)\n//           })\n//         //  Once the response has been sent, itś going to refresh and show the changes\n//           window.location = \"/\"\n//         } catch (err) {\n//             console.error(err.message)\n//         }\n//     }\n//     return (\n//         <div className=\"popup-box\">\n//             <div className=\"box\">\n//                 <span className=\"close-icon\" onClick={props.handleClose}>x</span>\n//                 {/* {props.content} */}\n//                 <form onSubmit={onSubmitForm}>\n//                     <label>\n//                         Amount:\n//                         <input type=\"number\" value={amount} onChange={e => setAmount(e.target.value)} />\n//                     </label>\n//                     <label>\n//                         Concept:\n//                         <input type=\"text\" value={concept} onChange={e => setConcept(e.target.value)} />\n//                     </label>\n//                     <label>\n//                         Type of movement:\n//                         <select value={typeM} disabled >\n//                             <option value=\"I\">Income</option>\n//                             <option value=\"O\">Outcome</option>\n//                         </select>\n//                     </label>\n//                     <label>\n//                         Date:\n//                         <input type=\"date\" value={dateM} onChange={e => setDateM(e.target.value)} />\n//                     </label>\n//                     <input type=\"submit\" value=\"Submit\" />\n//                 </form>\n//             </div>\n//         </div>\n//     )\n// }\n\n\n_s(EditMovement, \"pfq6k7wYm3IFvUGuRrhmKOpBl4I=\");\n\n_c = EditMovement;\nexport default EditMovement;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditMovement\");","map":{"version":3,"sources":["/home/ezequiel/challengeFullStack/my-app/src/components/EditMovement.js"],"names":["React","Modal","Button","Form","InputGroup","FormControl","EditMovement","list","show","setShow","useState","console","log","amount","setAmount","concept","setConcept","typeM","setTypeM","typem","dateM","setDateM","datem","substring","handleClose","handleShow","onSubmitForm","e","preventDefault","body","response","fetch","movement_id","method","headers","JSON","stringify","window","location","err","error","message","target","value"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Modal, Button, Form, InputGroup, FormControl } from \"react-bootstrap\";\n\nfunction EditMovement({ list }) {\n  const [show, setShow] = React.useState(false);\n  console.log(list);\n  const [amount, setAmount] = React.useState(list.amount);\n  const [concept, setConcept] = React.useState(list.concept);\n  const [typeM, setTypeM] = React.useState(list.typem);\n  const [dateM, setDateM] = React.useState(list.datem.substring(0, 10));\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const onSubmitForm = async (e) => {\n    // Handle the form submitted\n\n    // Prevent from refresh\n    e.preventDefault();\n    try {\n      const body = { amount, concept, typeM, dateM };\n      const response = await fetch(\n        `http://localhost:5000/movements/${list.movement_id}`,\n        {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(body),\n        }\n      );\n      //  Once the response has been sent, itś going to refresh and show the changes\n      window.location = \"/\";\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={handleShow}>\n        Edit\n      </Button>\n\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Edit movement</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form onSubmit={onSubmitForm}>\n            <Form.Label>Amount</Form.Label>\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Text>$</InputGroup.Text>\n              <FormControl\n                value={amount}\n                onChange={(e) => setAmount(e.target.value)}\n                aria-label=\"Amount (to the nearest dollar)\"\n              />\n            </InputGroup>\n\n            <Form.Label>Concept</Form.Label>\n            <InputGroup className=\"mb-3\">\n              <FormControl\n                value={concept}\n                aria-describedby=\"basic-addon1\"\n                onChange={(e) => setConcept(e.target.value)}\n                aria-describedby=\"basic-addon1\"\n              />\n            </InputGroup>\n\n            <Form.Label>Type of Operation</Form.Label>\n            <div\n              key={`inline-radio`}\n              className=\"mb-3\"\n              value={typeM}\n              onChange={(e) => setTypeM(e.target.value)}\n            >\n              <Form.Check\n                inline\n                disabled\n                label=\"Income\"\n                name=\"group1\"\n                type=\"radio\"\n                id={`inline-radio-1`}\n                value=\"I\"\n                checked={typeM === \"I\" ? true : false}\n              />\n              <Form.Check\n                inline\n                disabled\n                label=\"Outcome\"\n                name=\"group1\"\n                type=\"radio\"\n                id={`inline-radio-2`}\n                value=\"O\"\n                checked={typeM === \"O\" ? true : false}\n              />\n            </div>\n\n            <Form.Label>Date</Form.Label>\n            <FormControl\n              className=\"mb-3\"\n              type=\"date\"\n              value={dateM}\n              onChange={(e) => setDateM(e.target.value)}\n            ></FormControl>\n          </Form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button className=\"mb-3\" variant=\"primary\" type=\"submit\">\n            Submit\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\n// import \"../style.css\"\n\n// const EditMovement = props => {\n//     const [amount, setAmount] = React.useState(props.movement.amount)\n//     const [concept, setConcept] = React.useState(props.movement.concept)\n//     const [typeM, setTypeM] = React.useState(props.movement.typeM)\n//     const [dateM, setDateM] = React.useState(props.movement.dateM)\n\n//     const onSubmitForm = async e => {\n//         // Handle the form submitted\n\n//         // Prevent from refresh\n//         e.preventDefault()\n//         try {\n//           const body = { amount, concept, typeM, dateM }\n//           const response = await fetch(`http://localhost:5000/movements/${props.movement.movement_id}`, {\n//               method: \"PUT\",\n//               headers: { \"Content-Type\": \"application/json\" },\n//               body: JSON.stringify(body)\n//           })\n//         //  Once the response has been sent, itś going to refresh and show the changes\n//           window.location = \"/\"\n//         } catch (err) {\n//             console.error(err.message)\n//         }\n//     }\n\n//     return (\n//         <div className=\"popup-box\">\n//             <div className=\"box\">\n//                 <span className=\"close-icon\" onClick={props.handleClose}>x</span>\n//                 {/* {props.content} */}\n//                 <form onSubmit={onSubmitForm}>\n//                     <label>\n//                         Amount:\n//                         <input type=\"number\" value={amount} onChange={e => setAmount(e.target.value)} />\n//                     </label>\n//                     <label>\n//                         Concept:\n//                         <input type=\"text\" value={concept} onChange={e => setConcept(e.target.value)} />\n//                     </label>\n//                     <label>\n//                         Type of movement:\n//                         <select value={typeM} disabled >\n//                             <option value=\"I\">Income</option>\n//                             <option value=\"O\">Outcome</option>\n//                         </select>\n//                     </label>\n//                     <label>\n//                         Date:\n//                         <input type=\"date\" value={dateM} onChange={e => setDateM(e.target.value)} />\n//                     </label>\n//                     <input type=\"submit\" value=\"Submit\" />\n//                 </form>\n//             </div>\n//         </div>\n//     )\n// }\n\nexport default EditMovement;\n"]},"metadata":{},"sourceType":"module"}