{"ast":null,"code":"var _jsxFileName = \"/home/ezequiel/challengeFullStack/my-app/src/components/ListMovements.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Table, Button } from \"react-bootstrap\";\nimport EditMovement from \"./EditMovement\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ListMovements = () => {\n  _s();\n\n  const [list, setList] = React.useState([]); // const [popUp, setPopUp] = React.useState(false)\n  // const togglePopUp = () => {\n  //     setPopUp(!popUp)\n  // }\n\n  const getMovements = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/movements\");\n      const jsonData = await response.json();\n      setList(jsonData.slice(0, 10));\n      console.log(jsonData);\n    } catch (e) {\n      console.error(e.message);\n    }\n  };\n\n  const deleteMovement = async id => {\n    try {\n      const deleteMovement = await fetch(`http://localhost:5000/movements/${id}`, {\n        method: \"DELETE\"\n      });\n      setList(list.filter(list => list.movement_id !== id));\n    } catch (e) {\n      console.error(e.message);\n    }\n  }; // Makes a fetch request tou our REST api everytime this is component is rendered\n\n\n  React.useEffect(() => {\n    getMovements();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Concept\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: list.map(list => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"$\", list.amount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: list.concept\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: list.datem.substring(0, 10)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: list.typem === \"O\" ? \"Outcome\" : \"Income\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(EditMovement, {\n              list: list\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"danger\",\n              onClick: () => deleteMovement(list.movement_id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this)]\n        }, list.movement_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ListMovements, \"ZBNfaudzy8bVxb8UgkyyMnLdlWY=\");\n\n_c = ListMovements;\nexport default ListMovements;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListMovements\");","map":{"version":3,"sources":["/home/ezequiel/challengeFullStack/my-app/src/components/ListMovements.js"],"names":["React","Table","Button","EditMovement","ListMovements","list","setList","useState","getMovements","response","fetch","jsonData","json","slice","console","log","e","error","message","deleteMovement","id","method","filter","movement_id","useEffect","map","amount","concept","datem","substring","typem"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Table, Button } from \"react-bootstrap\";\nimport EditMovement from \"./EditMovement\";\n\nconst ListMovements = () => {\n  const [list, setList] = React.useState([]);\n  // const [popUp, setPopUp] = React.useState(false)\n\n  // const togglePopUp = () => {\n  //     setPopUp(!popUp)\n  // }\n\n  const getMovements = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/movements\");\n      const jsonData = await response.json();\n      setList(jsonData.slice(0, 10));\n      console.log(jsonData);\n    } catch (e) {\n      console.error(e.message);\n    }\n  };\n\n  const deleteMovement = async (id) => {\n    try {\n      const deleteMovement = await fetch(\n        `http://localhost:5000/movements/${id}`,\n        {\n          method: \"DELETE\",\n        }\n      );\n      setList(list.filter((list) => list.movement_id !== id));\n    } catch (e) {\n      console.error(e.message);\n    }\n  };\n\n  // Makes a fetch request tou our REST api everytime this is component is rendered\n  React.useEffect(() => {\n    getMovements();\n  }, []);\n\n  return (\n    <React.Fragment>\n      {\" \"}\n      {/* <table>\n                <thead>\n                <tr>\n                    <th>Amount</th>\n                    <th>Concept</th>\n                    <th>Date</th>\n                    <th>Type</th>\n                    <th>Edit</th>\n                    <th>Delete</th>\n                </tr>\n                </thead>\n                <tbody>\n                \n                {list.map(list => (\n                    <tr key={list.movement_id}>\n                        <td>{list.amount}</td>\n                        <td>{list.concept}</td>\n                        <td>{list.dateM}</td>\n                        <td>{list.typeM}</td>\n                        <td>\n                            <div>\n                                <input\n                                type=\"button\"\n                                value=\"Click to Open Popup\"\n                                onClick={togglePopUp}\n                                />\n                                {popUp && <EditMovement\n                                    movement={list}\n                                    handleClose={togglePopUp}\n                                />}\n                            </div>ct.useState(list.datem)\n\n                            <button\n                            onClick={() => deleteMovement(list.movement_id)}\n                            >\n                            Delete\n                            </button>\n                        </td>\n                    </tr>\n                ))}\n                </tbody>\n            </table> */}\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th>Amount</th>\n            <th>Concept</th>\n            <th>Date</th>\n            <th>Type</th>\n            <th></th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {list.map((list) => (\n            <tr key={list.movement_id}>\n              <td>${list.amount}</td>\n              <td>{list.concept}</td>\n              <td>{list.datem.substring(0, 10)}</td>\n              <td>{list.typem === \"O\" ? \"Outcome\" : \"Income\"}</td>\n              <td>\n                <EditMovement list={list} />\n                {/* <EditMovement /> */}\n                {/* <div>\n                                    <input\n                                    type=\"button\"\n                                    value=\"Click to Open Popup\"\n                                    onClick={togglePopUp}\n                                    />\n                                    {popUp && <EditMovement\n                                        movement={list}\n                                        handleClose={togglePopUp}\n                                    />}\n                                </div> */}\n              </td>\n              <td>\n                <Button\n                  variant=\"danger\"\n                  onClick={() => deleteMovement(list.movement_id)}\n                >\n                  Delete\n                </Button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </React.Fragment>\n  );\n};\n\nexport default ListMovements;\n"]},"metadata":{},"sourceType":"module"}